//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Domain.Entities
{
    public partial class User : StateObject
    {
        #region Primitive Properties
    
        public int UserID
        {
            get;
            set;
        }
    
        public string UserName
        {
            get;
            set;
        }
    
        public string Password
        {
            get;
            set;
        }
    
        public int RoleID
        {
            get { return _roleID; }
            set
            {
                if (_roleID != value)
                {
                    if (UserRole != null && UserRole.UserRoleID != value)
                    {
                        UserRole = null;
                    }
                    _roleID = value;
                }
            }
        }
        private int _roleID;
    
        public string RealName
        {
            get;
            set;
        }
    
        public string RealSurname
        {
            get;
            set;
        }
    
        public string Biography
        {
            get;
            set;
        }
    
        public byte[] Photo
        {
            get;
            set;
        }
    
        public string WebsiteAddress
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public FixupCollection<BlogPost> BlogPosts
        {
            get
            {
                if (_blogPosts == null)
                {
                    var newCollection = new FixupCollection<BlogPost>();
                    newCollection.CollectionChanged += FixupBlogPosts;
                    _blogPosts = newCollection;
                }
                return _blogPosts;
            }
            set
            {
                if (!ReferenceEquals(_blogPosts, value))
                {
                    var previousValue = _blogPosts as FixupCollection<BlogPost>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBlogPosts;
                    }
                    _blogPosts = value;
                    var newValue = value as FixupCollection<BlogPost>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBlogPosts;
                    }
                }
            }
        }
        private FixupCollection<BlogPost> _blogPosts;
    
        public UserRole UserRole
        {
            get { return _userRole; }
            set
            {
                if (!ReferenceEquals(_userRole, value))
                {
                    var previousValue = _userRole;
                    _userRole = value;
                    FixupUserRole(previousValue);
                }
            }
        }
        private UserRole _userRole;

        #endregion
        #region Association Fixup
    
        private void FixupUserRole(UserRole previousValue)
        {
            if (previousValue != null && previousValue.Users.Contains(this))
            {
                previousValue.Users.Remove(this);
            }
    
            if (UserRole != null)
            {
                if (!UserRole.Users.Contains(this))
                {
                    UserRole.Users.Add(this);
                }
                if (RoleID != UserRole.UserRoleID)
                {
                    RoleID = UserRole.UserRoleID;
                }
            }
        }
    
        private void FixupBlogPosts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (BlogPost item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (BlogPost item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }

        #endregion
    }
}
