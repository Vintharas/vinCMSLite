// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.4.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Blog Admin")]
    public partial class BlogAdminFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BlogAdmin.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Blog Admin", "The website will support an admin dashboard\nThat, among other things, will allow " +
                    "the user to admin the blog\nThe user authenticated as an administrator will be ab" +
                    "le to\nmanage blog posts: add new posts, edit existing posts, preview posts and d" +
                    "elete posts", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin dashboard(Index) will show a subset of blog posts (paged) and draft pos" +
            "ts")]
        public virtual void TheAdminDashboardIndexWillShowASubsetOfBlogPostsPagedAndDraftPosts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin dashboard(Index) will show a subset of blog posts (paged) and draft pos" +
                    "ts", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("A series of blog posts");
#line 10
 testRunner.And("A series of categories");
#line 11
 testRunner.And("A repository that allows us to access to the persistence layer");
#line 12
 testRunner.And("An admin controller");
#line 13
 testRunner.When("I go into the admin dashboard");
#line 14
 testRunner.Then("the result should be a subset of blog posts and a list with the draft posts");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin dashboard(Index) will show a second subset of blog posts (paged) and dr" +
            "aft posts when you press in \'older posts\'")]
        public virtual void TheAdminDashboardIndexWillShowASecondSubsetOfBlogPostsPagedAndDraftPostsWhenYouPressInOlderPosts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin dashboard(Index) will show a second subset of blog posts (paged) and dr" +
                    "aft posts when you press in \'older posts\'", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("A series of blog posts");
#line 18
 testRunner.And("A series of categories");
#line 19
 testRunner.And("A repository that allows us to access to the persistence layer");
#line 20
 testRunner.And("An admin controller");
#line 21
 testRunner.When("I go into the admin dashboard and I press on the second page");
#line 22
 testRunner.Then("the result should be a subset of blog posts (those on page 2) and a list with the" +
                    " draft posts");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to add new posts by clicking in the \'Add New Post\' link")]
        public virtual void TheAdminWillBeAbleToAddNewPostsByClickingInTheAddNewPostLink()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to add new posts by clicking in the \'Add New Post\' link", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("An admin");
#line 26
 testRunner.And("A series of blog posts");
#line 27
 testRunner.And("A series of categories");
#line 28
 testRunner.And("A repository that allows us to access to the persistence layer");
#line 29
 testRunner.And("An admin controller");
#line 30
 testRunner.When("I go into the admin dashboard and I press on the \'Add New Post\' link");
#line 31
 testRunner.Then("the result should be a form in which I can create a new blogPost");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to cancel the creation of a new blog post by clicking in t" +
            "he \'Cancel\' link on the post creation form")]
        public virtual void TheAdminWillBeAbleToCancelTheCreationOfANewBlogPostByClickingInTheCancelLinkOnThePostCreationForm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to cancel the creation of a new blog post by clicking in t" +
                    "he \'Cancel\' link on the post creation form", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
 testRunner.Given("A series of blog posts");
#line 35
 testRunner.And("A series of categories");
#line 36
 testRunner.And("A repository that allows us to access to the persistence layer");
#line 37
 testRunner.And("An admin controller");
#line 38
 testRunner.When("I click in the \'cancel\' button inside a create blog post form");
#line 39
 testRunner.Then("the result should be a redirection to the Index and a message saying that the blo" +
                    "g post creation has been cancelled");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to preview the creation of a new blog post by clicking in " +
            "the \'Preview\' button on the post creation form")]
        public virtual void TheAdminWillBeAbleToPreviewTheCreationOfANewBlogPostByClickingInThePreviewButtonOnThePostCreationForm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to preview the creation of a new blog post by clicking in " +
                    "the \'Preview\' button on the post creation form", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("A series of blog posts");
#line 43
 testRunner.And("A new blog post that has been created and filled in by the user");
#line 44
 testRunner.And("A repository that allows us to access to the persistence layer");
#line 45
 testRunner.And("An admin controller");
#line 46
 testRunner.When("I click in the \'preview\' button inside a create blog post form");
#line 47
 testRunner.Then("the result should be the saving of the blog post as a draft and a preview of the " +
                    "blogpost");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to preview the creation of a new blog post but if the form" +
            " is not valid, there will be a redirection to the same form")]
        public virtual void TheAdminWillBeAbleToPreviewTheCreationOfANewBlogPostButIfTheFormIsNotValidThereWillBeARedirectionToTheSameForm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to preview the creation of a new blog post but if the form" +
                    " is not valid, there will be a redirection to the same form", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("A series of blog posts");
#line 51
 testRunner.And("A series of categories");
#line 52
 testRunner.And("A repository that allows us to access to the persistence layer");
#line 53
 testRunner.And("An admin controller");
#line 54
 testRunner.When("I click in the \'preview\' button inside a create blog post form but the data is in" +
                    "valid");
#line 55
 testRunner.Then("the result should be a redirection to the same form with validation errors");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to publish a new blog post by clicking in the \'Publish\' bu" +
            "tton on the post creation form")]
        public virtual void TheAdminWillBeAbleToPublishANewBlogPostByClickingInThePublishButtonOnThePostCreationForm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to publish a new blog post by clicking in the \'Publish\' bu" +
                    "tton on the post creation form", ((string[])(null)));
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
 testRunner.Given("A series of blog posts");
#line 59
 testRunner.And("A series of categories");
#line 60
 testRunner.And("A repository that allows us to access to the persistence layer");
#line 61
 testRunner.And("An admin controller");
#line 62
 testRunner.When("I click in the \'publish\' button inside a create blog post form");
#line 63
 testRunner.Then("the result should be the saving of the blog post, a redirection to the admin inde" +
                    "x and a message saying the creation was successful");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to publish a new blog post but if the form is not valid, t" +
            "here will be a redirection to the same form")]
        public virtual void TheAdminWillBeAbleToPublishANewBlogPostButIfTheFormIsNotValidThereWillBeARedirectionToTheSameForm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to publish a new blog post but if the form is not valid, t" +
                    "here will be a redirection to the same form", ((string[])(null)));
#line 65
this.ScenarioSetup(scenarioInfo);
#line 66
 testRunner.Given("A series of blog posts");
#line 67
 testRunner.And("A series of categories");
#line 68
 testRunner.And("A repository that allows us to access to the persistence layer");
#line 69
 testRunner.And("An admin controller");
#line 70
 testRunner.When("I click in the \'publish\' button inside a create blog post form but the data is in" +
                    "valid");
#line 71
 testRunner.Then("the result should be a redirection to the same form with validation errors");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to edit an existing blog post")]
        public virtual void TheAdminWillBeAbleToEditAnExistingBlogPost()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to edit an existing blog post", ((string[])(null)));
#line 73
this.ScenarioSetup(scenarioInfo);
#line 74
 testRunner.Given("A series of blog posts");
#line 75
 testRunner.And("A series of categories");
#line 76
 testRunner.And("A repository that allows us to access to the persistence layer");
#line 77
 testRunner.And("An admin controller");
#line 78
 testRunner.When("I click in the \'edit\' link beside a certain blog posts");
#line 79
 testRunner.Then("the result should be a form that allow us to edit the form");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to edit an existing blog post and save it")]
        public virtual void TheAdminWillBeAbleToEditAnExistingBlogPostAndSaveIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to edit an existing blog post and save it", ((string[])(null)));
#line 81
this.ScenarioSetup(scenarioInfo);
#line 82
 testRunner.Given("A series of blog posts");
#line 83
 testRunner.And("A series of categories");
#line 84
 testRunner.And("A repository that allows us to access to the persistence layer");
#line 85
 testRunner.And("An admin controller");
#line 86
 testRunner.When("I click in the \'save\' link inside the edition form");
#line 87
 testRunner.Then("the result should be the saving of the modified blog post and a redirection to th" +
                    "e index of the dashboard with a message saying the edition was successful");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to edit an existing blog post and publish it if it was a d" +
            "raft")]
        public virtual void TheAdminWillBeAbleToEditAnExistingBlogPostAndPublishItIfItWasADraft()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to edit an existing blog post and publish it if it was a d" +
                    "raft", ((string[])(null)));
#line 89
this.ScenarioSetup(scenarioInfo);
#line 90
 testRunner.Given("A series of blog posts");
#line 91
 testRunner.And("A series of categories");
#line 92
 testRunner.And("A repository that allows us to access to the persistence layer");
#line 93
 testRunner.And("An admin controller");
#line 94
 testRunner.When("I click in the \'publish\' link inside the edition form");
#line 95
 testRunner.Then("the result should be the saving of the modified blog post, its publishing and a r" +
                    "edirection to the dashboard with a message saying it was successfully published");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to edit an existing blog post and publish it. If it is not" +
            " a draft there will be a redirection to the index and a message")]
        public virtual void TheAdminWillBeAbleToEditAnExistingBlogPostAndPublishIt_IfItIsNotADraftThereWillBeARedirectionToTheIndexAndAMessage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to edit an existing blog post and publish it. If it is not" +
                    " a draft there will be a redirection to the index and a message", ((string[])(null)));
#line 97
this.ScenarioSetup(scenarioInfo);
#line 98
 testRunner.Given("A series of blog posts");
#line 99
  testRunner.And("A blog post that is not a draft");
#line 100
 testRunner.And("A series of categories");
#line 101
 testRunner.And("A repository that allows us to access to the persistence layer");
#line 102
 testRunner.And("An admin controller");
#line 103
 testRunner.When("I click in the \'publish\' link inside the edition form with this no-draft blogpost" +
                    "");
#line 104
 testRunner.Then("the result should be the saving of the modified blog post and a redirection to th" +
                    "e index saying that the blog post was already published");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to see a blog post deletion form when he clicks in the \'de" +
            "lete\' link beside a blog post")]
        public virtual void TheAdminWillBeAbleToSeeABlogPostDeletionFormWhenHeClicksInTheDeleteLinkBesideABlogPost()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to see a blog post deletion form when he clicks in the \'de" +
                    "lete\' link beside a blog post", ((string[])(null)));
#line 106
this.ScenarioSetup(scenarioInfo);
#line 107
 testRunner.Given("A series of blog posts");
#line 108
 testRunner.And("A series of categories");
#line 109
 testRunner.And("A repository that allows us to access to the persistence layer");
#line 110
 testRunner.And("An admin controller");
#line 111
 testRunner.When("I click in the \'delete\' link in the dashboard beside a blog post");
#line 112
 testRunner.Then("the result should be a form that asks me if I am sure about deleting the post");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to cancel the deletion of a blog post by clicking on the \'" +
            "Cancel\' button in the deletion form")]
        public virtual void TheAdminWillBeAbleToCancelTheDeletionOfABlogPostByClickingOnTheCancelButtonInTheDeletionForm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to cancel the deletion of a blog post by clicking on the \'" +
                    "Cancel\' button in the deletion form", ((string[])(null)));
#line 114
this.ScenarioSetup(scenarioInfo);
#line 115
 testRunner.Given("A series of blog posts");
#line 116
 testRunner.And("A series of categories");
#line 117
 testRunner.And("A repository that allows us to access to the persistence layer");
#line 118
 testRunner.And("An admin controller");
#line 119
 testRunner.When("I click in the \'Cancel\' link in the blog post deletion form");
#line 120
 testRunner.Then("the result should be a redirection to the dashboard and a message saying that I h" +
                    "ave cancelled the deletion of the blog post");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to delete a blog post by clicking on the \'Delete\' button i" +
            "n the deletion form")]
        public virtual void TheAdminWillBeAbleToDeleteABlogPostByClickingOnTheDeleteButtonInTheDeletionForm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to delete a blog post by clicking on the \'Delete\' button i" +
                    "n the deletion form", ((string[])(null)));
#line 122
this.ScenarioSetup(scenarioInfo);
#line 123
 testRunner.Given("A series of blog posts");
#line 124
 testRunner.And("A series of categories");
#line 125
 testRunner.And("A repository that allows us to access to the persistence layer");
#line 126
 testRunner.And("An admin controller");
#line 127
 testRunner.When("I click in the \'Delete\' link in the blog post deletion form");
#line 128
 testRunner.Then("the result should be a redirection to the dashboard and a message saying that I h" +
                    "ave deleted the blogpost successfully");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to see a category management dashboard when he clicks on t" +
            "he \'Manage Categories\' link")]
        public virtual void TheAdminWillBeAbleToSeeACategoryManagementDashboardWhenHeClicksOnTheManageCategoriesLink()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to see a category management dashboard when he clicks on t" +
                    "he \'Manage Categories\' link", ((string[])(null)));
#line 130
this.ScenarioSetup(scenarioInfo);
#line 131
 testRunner.Given("A series of categories");
#line 132
 testRunner.And("A repository that allows us to access to the persistence layer to work with the c" +
                    "ategories");
#line 133
 testRunner.And("An admin controller");
#line 134
 testRunner.When("I click in the \'Manage Categories\' link in the admin dashboard");
#line 135
 testRunner.Then("the result should be a view that renders a form for adding new categories, and a " +
                    "number of forms for editing or deleting other categories");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to add a new category by filling the form for a new catego" +
            "ry and clicking in the \'Add\' button")]
        public virtual void TheAdminWillBeAbleToAddANewCategoryByFillingTheFormForANewCategoryAndClickingInTheAddButton()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to add a new category by filling the form for a new catego" +
                    "ry and clicking in the \'Add\' button", ((string[])(null)));
#line 137
this.ScenarioSetup(scenarioInfo);
#line 138
 testRunner.Given("A series of categories");
#line 139
 testRunner.And("A new category");
#line 140
 testRunner.And("A repository that allows us to access to the persistence layer to work with the c" +
                    "ategories");
#line 141
 testRunner.And("An admin controller");
#line 142
 testRunner.When("I click in the \'Add\' link in the \'Manage Categories\' dashboard");
#line 143
 testRunner.Then("the result should be the creation of a new category and a redirection to the \'Man" +
                    "age Categories\' dashboard with a proper message");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to add a new category but if the data is not valid the for" +
            "m will load again")]
        public virtual void TheAdminWillBeAbleToAddANewCategoryButIfTheDataIsNotValidTheFormWillLoadAgain()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to add a new category but if the data is not valid the for" +
                    "m will load again", ((string[])(null)));
#line 145
this.ScenarioSetup(scenarioInfo);
#line 146
 testRunner.Given("A series of categories");
#line 147
 testRunner.And("A new category");
#line 148
 testRunner.And("A repository that allows us to access to the persistence layer to work with the c" +
                    "ategories");
#line 149
 testRunner.And("An admin controller");
#line 150
 testRunner.When("I click in the \'Add\' link in the \'Manage Categories\' dashboard, having added inva" +
                    "lid data");
#line 151
 testRunner.Then("the result should be a redirection to the form with a validation error message");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to edit a given category")]
        public virtual void TheAdminWillBeAbleToEditAGivenCategory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to edit a given category", ((string[])(null)));
#line 153
this.ScenarioSetup(scenarioInfo);
#line 154
 testRunner.Given("A series of categories");
#line 155
 testRunner.And("A repository that allows us to access to the persistence layer to work with the c" +
                    "ategories");
#line 156
 testRunner.And("An admin controller");
#line 157
 testRunner.When("I click in the \'Delete\' link in the \'Manage Categories\' dashboard");
#line 158
 testRunner.Then("the result should be a form that allows me to edit the category");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to edit a given category and save it")]
        public virtual void TheAdminWillBeAbleToEditAGivenCategoryAndSaveIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to edit a given category and save it", ((string[])(null)));
#line 160
this.ScenarioSetup(scenarioInfo);
#line 161
 testRunner.Given("A series of categories");
#line 162
 testRunner.And("A repository that allows us to access to the persistence layer to work with the c" +
                    "ategories");
#line 163
 testRunner.And("An admin controller");
#line 164
 testRunner.When("I click in the \'Save\' button in the edit category form");
#line 165
 testRunner.Then("the result should be the saving of the edited category, a redirection to the cate" +
                    "gory management dashboard and a message");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to edit a given category, but if the data is invalid, the " +
            "user will be notified and redirected againt to the form")]
        public virtual void TheAdminWillBeAbleToEditAGivenCategoryButIfTheDataIsInvalidTheUserWillBeNotifiedAndRedirectedAgaintToTheForm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to edit a given category, but if the data is invalid, the " +
                    "user will be notified and redirected againt to the form", ((string[])(null)));
#line 167
this.ScenarioSetup(scenarioInfo);
#line 168
 testRunner.Given("A series of categories");
#line 169
 testRunner.And("A repository that allows us to access to the persistence layer to work with the c" +
                    "ategories");
#line 170
 testRunner.And("An admin controller");
#line 171
 testRunner.When("I click in the \'Save\' button in the edit category form when the data is invalid");
#line 172
 testRunner.Then("the result should be the same form with a validation message");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to cancel the edition of a category")]
        public virtual void TheAdminWillBeAbleToCancelTheEditionOfACategory()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to cancel the edition of a category", ((string[])(null)));
#line 174
this.ScenarioSetup(scenarioInfo);
#line 175
 testRunner.Given("A series of categories");
#line 176
 testRunner.And("A repository that allows us to access to the persistence layer to work with the c" +
                    "ategories");
#line 177
 testRunner.And("An admin controller");
#line 178
 testRunner.When("I click in the \'Cancel\' button in the edit category form");
#line 179
 testRunner.Then("the result should be a redirection to the main category management dashboard");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to access a deletion form for a given category by clicking" +
            " on the \'Delete\' link in the category admin dashboard")]
        public virtual void TheAdminWillBeAbleToAccessADeletionFormForAGivenCategoryByClickingOnTheDeleteLinkInTheCategoryAdminDashboard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to access a deletion form for a given category by clicking" +
                    " on the \'Delete\' link in the category admin dashboard", ((string[])(null)));
#line 181
this.ScenarioSetup(scenarioInfo);
#line 182
 testRunner.Given("A series of categories");
#line 183
 testRunner.And("A repository that allows us to access to the persistence layer to work with the c" +
                    "ategories");
#line 184
 testRunner.And("An admin controller");
#line 185
 testRunner.When("I click in the \'Delete\' button in the category admin dashboard");
#line 186
 testRunner.Then("the result should be a redirection to the delete category action that will show a" +
                    " deletion form");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to delete a given category by clicking in the \'delete\' but" +
            "ton in the deletion form")]
        public virtual void TheAdminWillBeAbleToDeleteAGivenCategoryByClickingInTheDeleteButtonInTheDeletionForm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to delete a given category by clicking in the \'delete\' but" +
                    "ton in the deletion form", ((string[])(null)));
#line 188
this.ScenarioSetup(scenarioInfo);
#line 189
 testRunner.Given("A series of categories");
#line 190
 testRunner.And("A repository that allows us to access to the persistence layer to work with the c" +
                    "ategories");
#line 191
 testRunner.And("An admin controller");
#line 192
 testRunner.When("I click in the \'Delete\' button in the category deletion form");
#line 193
 testRunner.Then("the result should be the deletion of the category and a redirection to the catego" +
                    "ry admin dashboard");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The admin will be able to cancel the deletion of a given category by clicking in " +
            "the \'cancel\' button in the deletion form")]
        public virtual void TheAdminWillBeAbleToCancelTheDeletionOfAGivenCategoryByClickingInTheCancelButtonInTheDeletionForm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The admin will be able to cancel the deletion of a given category by clicking in " +
                    "the \'cancel\' button in the deletion form", ((string[])(null)));
#line 195
this.ScenarioSetup(scenarioInfo);
#line 196
 testRunner.Given("A series of categories");
#line 197
 testRunner.And("A repository that allows us to access to the persistence layer to work with the c" +
                    "ategories");
#line 198
 testRunner.And("An admin controller");
#line 199
 testRunner.When("I click in the \'Cancel\' button in the category deletion form");
#line 200
 testRunner.Then("the result should be a redirection to the category admin dashboard an a message a" +
                    "bout the cancellation");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
